{"version":3,"sources":["actions/PokemonActionTypes.ts","App.tsx","actions/PokemonActions.ts","reducers/PokemonReducer.ts","reducers/RootReducer.ts","Store.ts","index.tsx"],"names":["POKEMON_LOADING","POKEMON_FAIL","POKEMON_SUCCESS","App","dispatch","useDispatch","useState","pokemonName","setPokemonName","pokemonState","useSelector","state","pokemon","console","log","className","type","onChange","event","target","value","onClick","a","axios","get","res","payload","data","src","sprites","front_default","alt","abilities","map","ability","name","defaultState","loading","pokemonReducer","action","RootReducer","combineReducers","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"2QAAaA,EAAkB,kBAClBC,EAAe,eACfC,EAAkB,kB,wBCmChBC,MA/Bf,WACE,IAAMC,EAAWC,cADJ,EAEyBC,mBAAS,IAFlC,mBAENC,EAFM,KAEOC,EAFP,KAGPC,EAAeC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAW7D,OAFAC,QAAQC,IAAI,gBAAiBL,GAI3B,cADA,CACA,OAAKM,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,SAZF,SAACC,GAAD,OACnBV,EAAeU,EAAMC,OAAOC,UAY1B,wBAAQC,QAVS,WCLG,IAACT,EDMvBR,GCNuBQ,EDMHL,ECNE,uCAAqB,WAC7CH,GAD6C,eAAAkB,EAAA,sEAI3ClB,EAAS,CACPY,KAAM,oBALmC,SAQzBO,IAAMC,IAAN,4CAA+CZ,IARtB,OAQrCa,EARqC,OAU3CrB,EAAS,CACPY,KAAMd,EACNwB,QAASD,EAAIE,OAZ4B,gDAe3CvB,EAAS,CACPY,KAAMf,IAhBmC,yDAArB,yDDepB,oBACCQ,EAAaG,SACZ,gCACE,qBAAKgB,IAAKnB,EAAaG,QAAQiB,QAAQC,cAAeC,IAAI,KACzDtB,EAAaG,QAAQoB,UAAUC,KAAI,SAACC,GACnC,OAAO,4BAAIA,EAAQA,QAAQC,iB,OEhBjCC,EAA8B,CAClCC,SAAS,GA0BIC,EAvBQ,WAGF,IAFnB3B,EAEkB,uDAFKyB,EACvBG,EACkB,uCAClB,OAAQA,EAAOvB,MACb,KAAKf,EACH,MAAO,CACLoC,SAAS,GAEb,KAAKrC,EACH,MAAO,CACLqC,SAAS,GAEb,KAAKnC,EACH,MAAO,CACLmC,SAAS,EACTzB,QAAS2B,EAAOb,SAEpB,QACE,OAAOf,IC7BE6B,EAJKC,0BAAgB,CAClC7B,QAAS0B,I,gBCSII,EARDC,sBACZH,EACAI,8BAAoBC,0BAAgBC,OCAtCC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.39266454.chunk.js","sourcesContent":["export const POKEMON_LOADING = \"POKEMON_LOADING\";\nexport const POKEMON_FAIL = \"POKEMON_FAIL\";\nexport const POKEMON_SUCCESS = \"POKEMON_SUCCESS\";\n\nexport type PokemonType = {\n  abilities: PokemonAbility[];\n  sprites: PokemonSprites;\n  stats: PokemonStat[];\n};\n\nexport type PokemonAbility = {\n  ability: {\n    name: string;\n    url: string;\n  };\n};\n\nexport type PokemonSprites = {\n  front_default: string;\n};\n\nexport type PokemonStat = {\n  base_stat: number;\n  stat: {\n    name: string;\n  };\n};\n\nexport interface PokemonLoading {\n  type: typeof POKEMON_LOADING;\n}\n\nexport interface PokemonFail {\n  type: typeof POKEMON_FAIL;\n}\n\nexport interface PokemonSuccess {\n  type: typeof POKEMON_SUCCESS;\n  payload: PokemonType;\n}\n\nexport type PokemonDispatchTypes =\n  | PokemonLoading\n  | PokemonFail\n  | PokemonSuccess;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { RootStore } from \"./Store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GetPokemon } from \"./actions/PokemonActions\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [pokemonName, setPokemonName] = useState(\"\");\n  const pokemonState = useSelector((state: RootStore) => state.pokemon);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setPokemonName(event.target.value);\n\n  const handleSubmit = () => {\n    dispatch(GetPokemon(pokemonName));\n  };\n\n  console.log(\"pokemon state\", pokemonState);\n\n  return (\n    //search for ditto\n    <div className=\"App\">\n      <input type=\"text\" onChange={handleChange} />\n      <button onClick={handleSubmit}>Search</button>\n      {pokemonState.pokemon && (\n        <div>\n          <img src={pokemonState.pokemon.sprites.front_default} alt=\"\" />\n          {pokemonState.pokemon.abilities.map((ability) => {\n            return <p>{ability.ability.name}</p>;\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { Dispatch } from \"redux\";\nimport {\n  PokemonDispatchTypes,\n  POKEMON_SUCCESS,\n  POKEMON_FAIL,\n  POKEMON_LOADING,\n} from \"./PokemonActionTypes\";\nimport axios from \"axios\";\n\nexport const GetPokemon = (pokemon: string) => async (\n  dispatch: Dispatch<PokemonDispatchTypes>\n) => {\n  try {\n    dispatch({\n      type: \"POKEMON_LOADING\",\n    });\n\n    const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemon}`);\n\n    dispatch({\n      type: POKEMON_SUCCESS,\n      payload: res.data,\n    });\n  } catch (e) {\n    dispatch({\n      type: POKEMON_FAIL,\n    });\n  }\n};\n","import {\n  POKEMON_FAIL,\n  POKEMON_LOADING,\n  POKEMON_SUCCESS,\n  PokemonDispatchTypes,\n  PokemonType,\n} from \"../actions/PokemonActionTypes\";\n\ninterface DefaultStateI {\n  loading: boolean;\n  pokemon?: PokemonType;\n}\n\nconst defaultState: DefaultStateI = {\n  loading: false,\n};\n\nconst pokemonReducer = (\n  state: DefaultStateI = defaultState,\n  action: PokemonDispatchTypes\n): DefaultStateI => {\n  switch (action.type) {\n    case POKEMON_FAIL:\n      return {\n        loading: false,\n      };\n    case POKEMON_LOADING:\n      return {\n        loading: true,\n      };\n    case POKEMON_SUCCESS:\n      return {\n        loading: false,\n        pokemon: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default pokemonReducer;\n","import { combineReducers } from \"redux\";\nimport pokemonReducer from \"./PokemonReducer\";\n\nconst RootReducer = combineReducers({\n  pokemon: pokemonReducer,\n});\n\nexport default RootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport RootReducer from \"./reducers/RootReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nconst Store = createStore(\n  RootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\n//export the type of the store\nexport type RootStore = ReturnType<typeof RootReducer>;\n\nexport default Store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}